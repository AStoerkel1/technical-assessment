3/5/22
Today I got familiar with the codebase and got both servers running locally.
I also decided to get some boiler plate out of the way, makeing a Quest.js in types
modeled after the Hero class. I also wrote out the QuestsDB.js modeled after HeroesDB.js
This is all just needed to get started working on the routes and make sure that I'll be
able to test them.

3/6/22
Morning:
Started with backend routes to create, get, modify, and delete quests. Had to add a method
to QuestsDB to return an array of all the quests associated with the given hero. Next step
will be writing the tests to make sure that the routes work. I noticed that instead of 
sending the router as a param, the SupertestSetup.js just imports the hero router, I'll 
probably change that to make the setup more generalized.

Afternoon:
Started by testing with postman before writing unit tests. Initially the server wouldn't
start because the automatic import didn't add the .js extentions. Then getQuestsByHeroId()
wasn't adding any quests from the database to the heroQuests array. In order to see if the 
quest was actually correct in the database I made a general route to get all quests from 
the QuestsDB. Turns out I forgot to add the heroId to the body of the quest in the POST
route. After adding it everything for backend task 1 and task 2 is working.

tested backend tasks 3 and 4 with postman and everything works as intended.

Started writing unit tests for the backend tasks. I decided to let SupertestSetup()
always app.use(heroesRouter()) because i need it for quest tests anyway

Bug1: none of my routes for the quests were going through so I switched out
the if statement in SupertestSetup() for app.use(questsRouter()) then they 
started to work. i figured it was something to do with how I passed the 
questRouter() and it turns out I was calling supertestSetup(questsRouter) 
instead of supertestSetup(questsRouter()).

Bug2: my last test for invalid quest deletion, which is supposed to send a 400 for 
mismatched heroId and questId sends a 404 "Not Found" instead. It is strange because
both the patch and delete routes/tests are written very similar but the patch works. 
I have never used jest before but up until now I had assumed beforeAll worked similar to 
how it does with JUnit @before, where it is called before each individual test. however if it
calls beforeAll only once per run of the test Suite, if i patch
a quest it gets a new questId due to calling the constructor for quest. I'm going to do
some research into the jest Docs later to see if that is the case. my guess is there is 
some method called beforeEach() which will have the functionality I expected.

3/7/22

After some research i found the jest docs for beforeAll() and beforeEach() and my hunch was
correct, so it makes sense that my test returned a 404 because before the mismatched ID test
there was a test that actually deleted the quest. It also means that the test i made which 
tested a correct questId and incorrect heroId for delete could have been a false positive,
so I'm glad i caught this.

my next step will be to do some research on Angular since I have never used it before.
I'll probably watch a youtube video about making a simple hello world with Angular and
express just to get my feet wet before I dive into the frontend for this project.

3/17/22
Looking at the tasks for the front end creating and updating are going to be
forms and delete should just be a button that makes the confirmation dialog appear.

Task 1: 
Then when you click on a hero it takes you to the page with detailed information on the hero with three
buttons at the bottom of the page to update or delete the hero and one button to go back to 
the main hero list. 

I should make a hero-details component with the Name, class, and level of the hero.

I should put all the button components into their own container component so that it's easier to reuse.

Task 2:
click on "Create New Hero":
It makes the most sense to put a "create" button at the bottom of the 
main hero list which takes the user to a new page for the form with three empty text input fields (name,
class, level) and a submit button which takes the user to the hero list page with a message "the hero was 
successfully created".

Task 3:
Click on the "Update" Button:
user is directed to a new page with a form. It has the same input fields as "create" except they are 
pre-filled with the current information about the hero. Clicking on submit will direct the user back 
to the hero list page with the new hero and a message about whether the hero was successfully
updated.

Task 4: 
Click on the "Delete" button:
User is prompted to confirm that they would like to delete the selected hero. Upon pressing confirm,
the user is directed back to the full hero list with a message that confirms whether the hero was 
successfully deleted.

Trouble on task 1: I realized that i would need to send hero Data through the route so that i would have
the hero's information to display. i thought that i needed to use @Input but i realized that would only work
if i made each list item it's own component so i had to do a lot of digging on how to get params from routes.
I couldn't find any good examples in the angular docs, but after googling around I found the ActivatedRoute
Module. 

task 2 bugs: Everything seemed to be working at first glance but initially it would only route me back to the
list view half the time(before i did any error handling). I was getting an HttpErrorResponse with code 201. the
message was "SyntaxError: Unexpected token C in JSON at position 0". so it was trying to parse the string response
as JSON. Nothing changed when i changed the generic type of the post call. it would always try to read it as json 
so i went to the backend and just sent res.status(201).send({"message": "Created"}). I wish i could have a clearer
picture of why this happened but I spent too much time already.

task 4: In the future I'll probably add a prettier confirmation box with it's own component. No big problems here,
although, it's important to note that the backend API also uses .sendStatus() with a 204 code which sends no content,
I may not be getting the same error as task 2 because the response is null.
